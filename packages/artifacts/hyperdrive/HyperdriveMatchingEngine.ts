export const HyperdriveMatchingEngineAbi = [
  {
    type: "constructor",
    inputs: [
      { name: "_name", type: "string", internalType: "string" },
      { name: "_morpho", type: "address", internalType: "contract IMorpho" },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "OPTIONS_TYPEHASH",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "ORDER_INTENT_TYPEHASH",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "cancelOrders",
    inputs: [
      {
        name: "_orders",
        type: "tuple[]",
        internalType: "struct IHyperdriveMatchingEngine.OrderIntent[]",
        components: [
          { name: "trader", type: "address", internalType: "address" },
          {
            name: "hyperdrive",
            type: "address",
            internalType: "contract IHyperdrive",
          },
          { name: "amount", type: "uint256", internalType: "uint256" },
          { name: "slippageGuard", type: "uint256", internalType: "uint256" },
          {
            name: "minVaultSharePrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "options",
            type: "tuple",
            internalType: "struct IHyperdrive.Options",
            components: [
              {
                name: "destination",
                type: "address",
                internalType: "address",
              },
              { name: "asBase", type: "bool", internalType: "bool" },
              { name: "extraData", type: "bytes", internalType: "bytes" },
            ],
          },
          {
            name: "orderType",
            type: "uint8",
            internalType: "enum IHyperdriveMatchingEngine.OrderType",
          },
          { name: "signature", type: "bytes", internalType: "bytes" },
          { name: "expiry", type: "uint256", internalType: "uint256" },
          { name: "salt", type: "bytes32", internalType: "bytes32" },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "eip712Domain",
    inputs: [],
    outputs: [
      { name: "fields", type: "bytes1", internalType: "bytes1" },
      { name: "name", type: "string", internalType: "string" },
      { name: "version", type: "string", internalType: "string" },
      { name: "chainId", type: "uint256", internalType: "uint256" },
      { name: "verifyingContract", type: "address", internalType: "address" },
      { name: "salt", type: "bytes32", internalType: "bytes32" },
      { name: "extensions", type: "uint256[]", internalType: "uint256[]" },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "hashOrderIntent",
    inputs: [
      {
        name: "_order",
        type: "tuple",
        internalType: "struct IHyperdriveMatchingEngine.OrderIntent",
        components: [
          { name: "trader", type: "address", internalType: "address" },
          {
            name: "hyperdrive",
            type: "address",
            internalType: "contract IHyperdrive",
          },
          { name: "amount", type: "uint256", internalType: "uint256" },
          { name: "slippageGuard", type: "uint256", internalType: "uint256" },
          {
            name: "minVaultSharePrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "options",
            type: "tuple",
            internalType: "struct IHyperdrive.Options",
            components: [
              {
                name: "destination",
                type: "address",
                internalType: "address",
              },
              { name: "asBase", type: "bool", internalType: "bool" },
              { name: "extraData", type: "bytes", internalType: "bytes" },
            ],
          },
          {
            name: "orderType",
            type: "uint8",
            internalType: "enum IHyperdriveMatchingEngine.OrderType",
          },
          { name: "signature", type: "bytes", internalType: "bytes" },
          { name: "expiry", type: "uint256", internalType: "uint256" },
          { name: "salt", type: "bytes32", internalType: "bytes32" },
        ],
      },
    ],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isCancelled",
    inputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "kind",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "matchOrders",
    inputs: [
      {
        name: "_longOrder",
        type: "tuple",
        internalType: "struct IHyperdriveMatchingEngine.OrderIntent",
        components: [
          { name: "trader", type: "address", internalType: "address" },
          {
            name: "hyperdrive",
            type: "address",
            internalType: "contract IHyperdrive",
          },
          { name: "amount", type: "uint256", internalType: "uint256" },
          { name: "slippageGuard", type: "uint256", internalType: "uint256" },
          {
            name: "minVaultSharePrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "options",
            type: "tuple",
            internalType: "struct IHyperdrive.Options",
            components: [
              {
                name: "destination",
                type: "address",
                internalType: "address",
              },
              { name: "asBase", type: "bool", internalType: "bool" },
              { name: "extraData", type: "bytes", internalType: "bytes" },
            ],
          },
          {
            name: "orderType",
            type: "uint8",
            internalType: "enum IHyperdriveMatchingEngine.OrderType",
          },
          { name: "signature", type: "bytes", internalType: "bytes" },
          { name: "expiry", type: "uint256", internalType: "uint256" },
          { name: "salt", type: "bytes32", internalType: "bytes32" },
        ],
      },
      {
        name: "_shortOrder",
        type: "tuple",
        internalType: "struct IHyperdriveMatchingEngine.OrderIntent",
        components: [
          { name: "trader", type: "address", internalType: "address" },
          {
            name: "hyperdrive",
            type: "address",
            internalType: "contract IHyperdrive",
          },
          { name: "amount", type: "uint256", internalType: "uint256" },
          { name: "slippageGuard", type: "uint256", internalType: "uint256" },
          {
            name: "minVaultSharePrice",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "options",
            type: "tuple",
            internalType: "struct IHyperdrive.Options",
            components: [
              {
                name: "destination",
                type: "address",
                internalType: "address",
              },
              { name: "asBase", type: "bool", internalType: "bool" },
              { name: "extraData", type: "bytes", internalType: "bytes" },
            ],
          },
          {
            name: "orderType",
            type: "uint8",
            internalType: "enum IHyperdriveMatchingEngine.OrderType",
          },
          { name: "signature", type: "bytes", internalType: "bytes" },
          { name: "expiry", type: "uint256", internalType: "uint256" },
          { name: "salt", type: "bytes32", internalType: "bytes32" },
        ],
      },
      { name: "_lpAmount", type: "uint256", internalType: "uint256" },
      {
        name: "_addLiquidityOptions",
        type: "tuple",
        internalType: "struct IHyperdrive.Options",
        components: [
          { name: "destination", type: "address", internalType: "address" },
          { name: "asBase", type: "bool", internalType: "bool" },
          { name: "extraData", type: "bytes", internalType: "bytes" },
        ],
      },
      {
        name: "_removeLiquidityOptions",
        type: "tuple",
        internalType: "struct IHyperdrive.Options",
        components: [
          { name: "destination", type: "address", internalType: "address" },
          { name: "asBase", type: "bool", internalType: "bool" },
          { name: "extraData", type: "bytes", internalType: "bytes" },
        ],
      },
      { name: "_feeRecipient", type: "address", internalType: "address" },
      { name: "_isLongFirst", type: "bool", internalType: "bool" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "morpho",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "contract IMorpho" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "onMorphoFlashLoan",
    inputs: [
      { name: "_lpAmount", type: "uint256", internalType: "uint256" },
      { name: "_data", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "verifySignature",
    inputs: [
      { name: "_hash", type: "bytes32", internalType: "bytes32" },
      { name: "_signature", type: "bytes", internalType: "bytes" },
      { name: "_signer", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "EIP712DomainChanged",
    inputs: [],
    anonymous: false,
  },
  {
    type: "event",
    name: "OrdersCancelled",
    inputs: [
      {
        name: "trader",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "orderHashes",
        type: "bytes32[]",
        indexed: false,
        internalType: "bytes32[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OrdersMatched",
    inputs: [
      {
        name: "hyperdrive",
        type: "address",
        indexed: true,
        internalType: "contract IHyperdrive",
      },
      {
        name: "longOrderHash",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "shortOrderHash",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "long",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "short",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [{ name: "target", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "AddressInsufficientBalance",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
  },
  { type: "error", name: "AlreadyCancelled", inputs: [] },
  { type: "error", name: "AlreadyExpired", inputs: [] },
  { type: "error", name: "ECDSAInvalidSignature", inputs: [] },
  {
    type: "error",
    name: "ECDSAInvalidSignatureLength",
    inputs: [{ name: "length", type: "uint256", internalType: "uint256" }],
  },
  {
    type: "error",
    name: "ECDSAInvalidSignatureS",
    inputs: [{ name: "s", type: "bytes32", internalType: "bytes32" }],
  },
  { type: "error", name: "FailedInnerCall", inputs: [] },
  { type: "error", name: "InvalidDestination", inputs: [] },
  { type: "error", name: "InvalidMatch", inputs: [] },
  { type: "error", name: "InvalidOrderType", inputs: [] },
  { type: "error", name: "InvalidSender", inputs: [] },
  { type: "error", name: "InvalidSettlementAsset", inputs: [] },
  { type: "error", name: "InvalidShortString", inputs: [] },
  { type: "error", name: "InvalidSignature", inputs: [] },
  { type: "error", name: "MismatchedHyperdrive", inputs: [] },
  { type: "error", name: "ReentrancyGuardReentrantCall", inputs: [] },
  {
    type: "error",
    name: "SafeERC20FailedOperation",
    inputs: [{ name: "token", type: "address", internalType: "address" }],
  },
  {
    type: "error",
    name: "StringTooLong",
    inputs: [{ name: "str", type: "string", internalType: "string" }],
  },
] as const
